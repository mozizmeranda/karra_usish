from aiogram import types, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from states import Registration
from utils import contact_save, create_contact, lead_create_without_landing
from keyboards import contact_button, question1, question2, question3
from config import *

bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# voronka_id = 9317886


@dp.message_handler(CommandStart())
async def get_start(message: types.Message, state: FSMContext):
    args = message.get_args()
    if args:
        await message.answer("üì¢ –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞—Ö–º–∞—Ç! "
                             "–ú—É“≥–∏–º –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –π—û“õ–æ—Ç–∏–± “õ—û–π–º–∞—Å–ª–∏–∫ —É—á—É–Ω, –∏–ª—Ç–∏–º–æ—Å, –±–∏–∑–Ω–∏–Ω–≥ Telegram –≥—É—Ä—É“≥–∏–º–∏–∑–≥–∞ “õ—û—à–∏–ª–∏–Ω–≥: "
                             "üîó https://t.me/+tkXweoTohw1lODhi. –ë–∏–∑–Ω–∏–Ω–≥ –≤–µ–±–∏–Ω–∞—Ä–≥–∞ —è—Ö—à–∏—Ä–æ“õ "
                             "—Ç–∞–π—ë—Ä–≥–∞—Ä–ª–∏–∫ –∫—û—Ä–∏—à —É—á—É–Ω, –∫–æ–º–ø–∞–Ω–∏—è–Ω–≥–∏–∑–¥–∞ –Ω–µ—á—Ç–∞ —Ö–æ–¥–∏–º –∏—à–ª–∞–π–¥–∏?",
                             reply_markup=question1)
        await Registration.num_emploeyes.set()
        d = args.split("--")
        print(d)
        l = {
            "name": d[0],
            "number": f"+{d[1]}"
        }

        create_contact(d[0], d[1])
        await state.set_data(l)

    else:
        text = """üì¢ –ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º! 
        26-–º–∞—Ä—Ç –∫—É–Ω–∏ —Å–æ–∞—Ç 14:00 –¥–∞ –ë–∞—Ä–Ω–æ –¢—É—Ä—Å—É–Ω–æ–≤–∞ –±–∏–ª–∞–Ω "–¢—û“ì—Ä–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è —Ç–∏–∑–∏–º–∏ —ë—Ä–¥–∞–º–∏–¥–∞ –∫–æ–º–ø–∞–Ω–∏—è —Ñ–æ–π–¥–∞—Å–∏–Ω–∏ “õ–∞–Ω–¥–∞–π 
        –æ—à–∏—Ä–∏—à –º—É–º–∫–∏–Ω" –º–∞–≤–∑—É—Å–∏–¥–∞–≥–∏ –≤–µ–±–∏–Ω–∞—Ä–≥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω, –∏–ª—Ç–∏–º–æ—Å, –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥."""
        await message.answer(text=text)
        await message.answer(text="üë§ –ò–ª—Ç–∏–º–æ—Å, –∏—Å–º –≤–∞ —Ñ–∞–º–∏–ª–∏—è–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        await Registration.name.set()


@dp.message_handler(content_types=types.ContentTypes.TEXT, state=Registration.name)
async def get_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        await message.answer(f"üìû –†–∞“≥–º–∞—Ç, {data['name']}! –ï–Ω–¥–∏, –∏–ª—Ç–∏–º–æ—Å, "
                             f"—Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –ø–∞—Å—Ç–¥–∞–≥–∏ —Ç—É–≥–º–∞ –æ—Ä“õ–∞–ª–∏ —É–ª–∞—à–∏–Ω–≥.", reply_markup=contact_button)
    await Registration.next()


@dp.message_handler(content_types=types.ContentTypes.ANY, state=Registration.phone)
async def get_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = message.text or message.contact.phone_number
        create_contact(data['name'], data['number'])
    await message.answer("üì¢ –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞—Ö–º–∞—Ç, "
                         "–ú—É“≥–∏–º –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –π—û“õ–æ—Ç–∏–± “õ—û–π–º–∞—Å–ª–∏–∫ —É—á—É–Ω, –∏–ª—Ç–∏–º–æ—Å, –±–∏–∑–Ω–∏–Ω–≥ Telegram –≥—É—Ä—É“≥–∏–º–∏–∑–≥–∞ “õ—û—à–∏–ª–∏–Ω–≥: "
                         "üîó https://t.me/+tkXweoTohw1lODhi. "
                         "–ë–∏–∑–Ω–∏–Ω–≥ –≤–µ–±–∏–Ω–∞—Ä–≥–∞ —è—Ö—à–∏—Ä–æ“õ —Ç–∞–π—ë—Ä–≥–∞—Ä–ª–∏–∫ –∫—û—Ä–∏—à —É—á—É–Ω, –∫–æ–º–ø–∞–Ω–∏—è–Ω–≥–∏–∑–¥–∞ –Ω–µ—á—Ç–∞ —Ö–æ–¥–∏–º –∏—à–ª–∞–π–¥–∏?",
                         reply_markup=question1)
    await Registration.next()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith("q_"), state=Registration.num_emploeyes)
async def get_num_emploeyes(call: types.CallbackQuery, state: FSMContext):
    ans = call.data.split("_")[1]
    async with state.proxy() as data:
        data['num_emploeyes'] = ans

    await call.message.answer("–†–∞“≥–º–∞—Ç! –°–∏–∑–Ω–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏—è–Ω–≥–∏–∑–Ω–∏–Ω–≥ –π–∏–ª–ª–∏–∫ –æ–±–æ—Ä–æ—Ç–∏ “õ–∞–Ω—á–∞? "
                              "–ë—É –º–∞—ä–ª—É–º–æ—Ç –≤–µ–±–∏–Ω–∞—Ä–≥–∞ —è—Ö—à–∏—Ä–æ“õ —Ç–∞–π—ë—Ä–≥–∞—Ä–ª–∏–∫ –∫—û—Ä–∏—à —É—á—É–Ω –∫–µ—Ä–∞–∫.",
                              reply_markup=question2)
    await Registration.turnover.set()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith("q_"), state=Registration.turnover)
async def get_turnover(call: types.CallbackQuery, state: FSMContext):
    ans = call.data.split("_")[1]
    async with state.proxy() as data:
        data['turnover'] = ans
    await call.message.answer('–ë–∏–∑ —Å–∏–∑–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∏—à–≥–∞ –¥–µ—è—Ä–ª–∏ —Ç–∞–π—ë—Ä–º–∏–∑. '
                              '–ö–æ–º–ø–∞–Ω–∏—è–¥–∞ “õ–∞–Ω–¥–∞–π —Ä–æ–ª–Ω–∏ –±–∞–∂–∞—Ä–∞—ë—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑–Ω–∏ –∞–Ω–∏“õ–ª–∞–± –±–µ—Ä–∏–Ω–≥ üåü',
                              reply_markup=question3)
    await Registration.role.set()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith("q_"), state=Registration.role)
async def get_turnover(call: types.CallbackQuery, state: FSMContext):
    ans = call.data.split("_")[1]
    async with state.proxy() as data:
        data['role'] = ans
        contact_save(
            num_emploeyes=data['num_emploeyes'],
            turnover=data['turnover'],
            role=data['role'],
            number=data['number']
        )
        lead_create_without_landing(data['number'], data['number'])
        await call.message.answer("–ñ–∞–≤–æ–±–ª–∞—Ä–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç! –ë–∏–∑ –∏—à–æ–Ω–∞–º–∏–∑–∫–∏, "
                                  "–≤–µ–±–∏–Ω–∞—Ä–∏–º–∏–∑ –∞–π–Ω–∞–Ω —Å–∏–∑ —É—á—É–Ω –º–æ—Å. –í–µ–±–∏–Ω–∞—Ä–¥–∞ –∫—û—Ä–∏—à–≥—É–Ω—á–∞!")
    await state.finish()

    # await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
